{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderSlot as _renderSlot, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"href\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"nav\", {\n    ref: \"navEl\",\n    class: _normalizeClass([\"nav-strip\", {\n      atTop: $setup.atTop\n    }]),\n    \"aria-label\": \"Main navigation\"\n  }, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.links, (item, i) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: i\n    }, [_createElementVNode(\"a\", {\n      href: item.href\n    }, _toDisplayString(item.label), 9 /* TEXT, PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */)), _renderSlot(_ctx.$slots, \"default\")])], 2 /* CLASS */);\n}","map":{"version":3,"names":["_createElementBlock","ref","class","_normalizeClass","atTop","$setup","_createElementVNode","_Fragment","_renderList","$props","links","item","i","key","href","label","_hoisted_1","_renderSlot","_ctx","$slots"],"sources":["/Users/lucasteindorf/Documents/Programmierung/WebDev/web-template/src/components/FooterComponent.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted, onBeforeUnmount } from 'vue'\n\nconst props = defineProps({\n  links: { type: Array, default: () => ([]) },\n  triggerSelector: { type: String, default: '.hero' },\n  offsetTopPx: { type: Number, default: 0 },\n})\n\nconst atTop = ref(false)\nconst navEl = ref(null)\nlet observer = null\nlet ro = null\n\nfunction setSpaceVar() {\n  if (!navEl.value) return\n  const h = navEl.value.offsetHeight || 0\n  // + safe-area inset for iOS\n  const css = `calc(${h}px + env(safe-area-inset-bottom))`\n  document.documentElement.style.setProperty('--nav-space', css)\n}\n\nonMounted(() => {\n  // Observe the hero (or fallback to scroll)\n  const trigger = document.querySelector(props.triggerSelector)\n  if (!trigger) {\n    const onScroll = () => (atTop.value = window.scrollY > 10)\n    onScroll()\n    window.addEventListener('scroll', onScroll, { passive: true })\n    observer = { disconnect: () => window.removeEventListener('scroll', onScroll) }\n  } else {\n    observer = new IntersectionObserver(\n      (entries) => { atTop.value = !entries[0].isIntersecting },\n      { root: null, threshold: 0, rootMargin: `-${props.offsetTopPx}px 0px 0px 0px` }\n    )\n    observer.observe(trigger)\n  }\n\n  // Keep --nav-space up to date\n  setSpaceVar()\n  window.addEventListener('resize', setSpaceVar)\n  // Optional: watch for content/ font changes\n  ro = new ResizeObserver(setSpaceVar)\n  ro.observe(navEl.value)\n})\n\nonBeforeUnmount(() => {\n  observer?.disconnect?.()\n  window.removeEventListener('resize', setSpaceVar)\n  ro?.disconnect?.()\n})\n</script>\n\n<template>\n  <nav ref=\"navEl\" class=\"nav-strip\" :class=\"{ atTop }\" aria-label=\"Main navigation\">\n    <ul>\n      <li v-for=\"(item, i) in links\" :key=\"i\"><a :href=\"item.href\">{{ item.label }}</a></li>\n      <slot />\n    </ul>\n  </nav>\n</template>\n"],"mappings":";;;uBAsDEA,mBAAA,CAKM;IALDC,GAAG,EAAC,OAAO;IAACC,KAAK,EAAAC,eAAA,EAAC,WAAW;MAAAC,KAAA,EAAWC,MAAA,CAAAD;IAAK;IAAI,YAAU,EAAC;MAC/DE,mBAAA,CAGK,c,kBAFHN,mBAAA,CAAsFO,SAAA,QAAAC,WAAA,CAA9DC,MAAA,CAAAC,KAAK,GAAjBC,IAAI,EAAEC,CAAC;yBAAnBZ,mBAAA,CAAsF;MAAtDa,GAAG,EAAED;IAAC,IAAEN,mBAAA,CAAyC;MAArCQ,IAAI,EAAEH,IAAI,CAACG;wBAASH,IAAI,CAACI,KAAK,wBAAAC,UAAA,E;kCAC1EC,WAAA,CAAQC,IAAA,CAAAC,MAAA,a","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}